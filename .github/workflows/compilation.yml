name: CI

on:
  push:
  pull_request:
  repository_dispatch:
    types: [run_build]

jobs:
  build-docker:
    runs-on: ubuntu-latest
    container: ${{ matrix.os[0] }}:${{ matrix.os[1] }}
    strategy:
      matrix:
        os: [[alpine, 3.16], [fedora, latest]]
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies Alpine
      if: matrix.os[0] == 'alpine'
      run: |
        apk add build-base bash gcc git make autoconf automake python3 py3-pip cmake pkgconfig libarchive-dev openssl-dev gpgme-dev libtool \
          flex bison texinfo gmp-dev mpfr-dev mpc1-dev readline-dev ncurses-dev
    
    - name: Install dependencies Fedora
      if: matrix.os[0] == 'fedora'
      run: |
        dnf -y install @development-tools gcc gcc-c++ g++ wget git autoconf automake python3 python3-pip make cmake pkgconf \
          libarchive-devel openssl-devel gpgme-devel libtool gettext texinfo bison flex gmp-devel mpfr-devel libmpc-devel ncurses-devel \
          diffutils glibc-gconv-extra xz

    - name: Compile Tools
      run: |
        export PSPDEV=$PWD/pspdev
        export PATH=$PATH:$PSPDEV/bin
        ./toolchain.sh

    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT
    
    - name: Compress pspdev folder
      run: |
        tar -zcvf pspdev.tar.gz pspdev
    
    - uses: actions/upload-artifact@v3
      with:
        name: pspdev-${{ steps.slug.outputs.sha8 }}-${{ matrix.os[0] }}
        path: pspdev.tar.gz


  build-VM:
    runs-on: ${{ matrix.os[0] }}
    strategy:
      matrix:
        os: [[macos-latest, bash], [ubuntu-latest, bash]]
    defaults:
     run:
      shell: ${{ matrix.os[1] }} {0}

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies Ubuntu 
      if: matrix.os[0] == 'ubuntu-latest'
      run: |
        sudo apt-get -y install libarchive-dev libcurl4 libcurl4-openssl-dev libssl-dev libarchive-dev libgpgme-dev \
          gettext texinfo bison flex libncurses5-dev libgmp3-dev libmpfr-dev libmpc-dev
        echo "MSYSTEM=x64" >> $GITHUB_ENV

    - name: Install Dependencies Mac
      if: startsWith( matrix.os[0], 'macos' )
      run: |
        brew install automake libarchive bash openssl gpgme libtool gettext texinfo bison flex gnu-sed gsl gmp mpfr
        echo "MSYSTEM=x64" >> $GITHUB_ENV

    - name: Compile Tools
      run: |
        export PATH="/usr/local/opt/libtool/libexec/gnubin:$PATH"
        export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
        export PKG_CONFIG_PATH="/usr/local/opt/libarchive/lib/pkgconfig:/usr/local/opt/openssl@3/lib/pkgconfig"
        export PSPDEV=$PWD/pspdev
        export PATH=$PATH:$PSPDEV/bin
        ./toolchain.sh
    
    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT
    
    - name: Compress pspdev folder
      run: |
        tar -zcvf pspdev.tar.gz pspdev
    
    - uses: actions/upload-artifact@v3
      with:
        name: pspdev-${{ steps.slug.outputs.sha8 }}-${{ matrix.os[0] }}
        path: pspdev.tar.gz
